-need to support running surplus 
-need to move selectors out of reducers folder 

-Have the router prevent you from going to the 
main budget page if you haven't created a budget 
yet.  
-Explore adding an interface to the action in the reducers 
-write unit tests
-make keyboard accessible
-make screenreader accessible
-make responsive
-add styling to make it look nicer 
-attempt to use a material design component to replace the dumb components
  -Get familiar with all of the components. 
  -List here possible components you might use:
    -Input
    -Button 
    
  -for each piece of UI you have think of what a good material design 
  component replacement might be.
  -Refactor to use the material design component. 

-fix linting errors 
-Use constants for your action types
-implement exporting and importing budgets 
-create protractor tests that create a budget from scratch and then creates
 transactions.  It verifies that the calculated values are correct at the top.
 Then destroys the budget.  
-Have travisci or circleci run protractor tests and unit tests before it deploys
 using surge.
-prevent writing to master (require doing PRs to master)
-Designing the page 
  -we need a consistent header and footer 
  -the header should contain some consistent nav.  It should have a button 
  to easily take you to the budget list page. 
-implement optimistic concurrency.  This will work well since you are generating
 the ids on the client side. 
-research how to do angular2 forms.
-handle logging (maybe there's a few logging service, or at least free bug tracking)
-router edge cases (invalid month, year in the url) 
-implement bounds checking based on startdate to enddate.  Prevent the user from 
going to previous months that are not allowed.  Same goes for final month.

