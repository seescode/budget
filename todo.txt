How to deploy to surge:
-npm run build
-cd into the dist directory 
-surge --domain ng-budget.surge.sh


-When you underspend or overspend have another pill that shows up that says 
surplus or deficit.    

-What does surplus even mean?
  -This only appears if the current selected month is the current month
  -On the very first month with zero transactions it shouldn't have a surplus. 
  That makes no sense.  Therefore surplus is a summation of all previous months. 
  If you used less money then what is expected then you have a surplus for the 
  current month.
  -Let's not include the current month's numbers in the surplus/deficit.  It 
  complicates the calculations and it's not as useful as you may think. 
-Test 1:
  -1200 budget from Jan to Dec
  -Current month is Jan so never show surplus/deficit.  Surplus/deficit should only work for 
  months after the first month.   
-Test 2:
  -1200 budget from Jan to Dec
  -Jan to March spend 250 
  -Current month is April so surplus would be 50
-Test 3:
  -1200 budget from Jan to Dec
  -Jan to March spend 350 
  -Current month is April so deficit would be 50
-Test 4:
  -1200 budget from Jan to Dec
  -Jan to March spend 300 
  -Current month is April so this is a perfect situation so just hide surplus/deficit


-Use a route guard to load the data for the budget list page 
-Use a route guard to load the data for budgeting page


-What's the best way to surface how I'm doing on my total 
budget?
  -what about a simple toggle.  When you click it, it will 
  show the yearly amounts on another line.  When you click 
  again it should hide it. 

-fix unit tests 
-fix e2e tests 
-service workers


-Be able to add transactions through speech

-setup a global error handler so that it replaces the current page with a 
500 error page
-fix todos

-Make sure to use the built in angular material theme instead of 
hardcoding colors.  Speaking of which you did hardcode the navbar 
color 
-delete unused styles in all of the css files 
-maybe use BEM for styling 
-be consistent with rems or pixels
-I don't think it's necessary to make a custom angular material theme.  
The only advantage of making one is that you can share the file across 
multiple projects.
  -I guess the big thing is not to import a default theme though.  The 
  problem is that you are always overriding the default colors without 
  a proper theme. 
-Try and switch to sass.  See if you can get the warning color coming 
from angular material warning sass variable.
-Add new category for fees 


-Add the CI setup 


Everyday:
-Always have the unit tests running
-Deploy at the end of each session assuming unit tests aren't breaking 
and lint isn't failing.

Plan:
-search for TODO in the code 


-Need a 404 page when user accesses bad urls 
-Need a 500 page for when the app gets errors 
-Need to stop abusing withLatestFrom.
-Maybe consider decoupling your application's
state from the db data.  Honestly probably 
doesn't make sense since the db data is something 
you control whereas an api is something you don't.
-Bold the selected budget on the right hand side 
-We need to also be able to view the start and end dates of a budget as quick reference. 
-Materify the manage budget page 

-Styling 
  -the angular material site adds shadows to the sidebars.  You 
  should do the same. 
  -make all buttons use the nice material buttons 


-write e2e tests 
  -use your more higher level operations to simplify writing e2e 
  tests.
    -create a method that will just create a new budget 
    completely from scratch.  So it takes name, categories, 
    transactions per month 
  -Break out your app.e2e-spec.ts into multiple files.  
  -fix all e2e tests 
  -write missing e2e tests 
-Write more unit tests 


-When you add a transaction and then delete it
the pie graph will not remove the nodes from 
-enable the ability to use the keyboard to undo a transaction.  Maybe escape 
 or have it focus on the snackbar undo.  
-Whenever you expand category transactions it resets your focus to beginning of
 the list of categories.  Maybe you can have it refocus based on the categoryId 
 in the url. 
-implement exporting and importing budgets.



-group the end to end tests in a logical manner


-write unit tests for side effects
-unit test actions creator service 
-prevent navigating to earlier months than begin date.  Same 
with end date. 
-prevent going ahead to months that are in the future. 
-Use constants for your action types
-write unit tests for dumb components
-need to write a ton of documentation



Animate:
-use fade in animation for changing budgets and going from 
one month to the next month
-when viewing transactions for a category have it come up from
the bottom.  Alternatively fade in animation is fine too
-when viewing create new budget screen fade in animation. 


read
-https://bost.ocks.org/mike/join/
-https://bost.ocks.org/mike/circles/
-https://bost.ocks.org/mike/selection/
-https://bost.ocks.org/mike/d3/workshop/#33



-https://material.io/icons/



-maybe in the future you can have 3 media query breakpoints:
  -desktop: would show both side navs
  -tablet: would only show the reporting nav 
  -phone: would show no navs


-Have the router prevent you from going to the 
main budget page if you haven't created a budget 
yet.  
-Explore adding an interface to the action in the reducers 

-make keyboard accessible
-make screenreader accessible

-fix linting errors 
-Have travisci or circleci run protractor tests and unit tests before it deploys
 using surge.
-prevent writing to master (require doing PRs to master)
-implement optimistic concurrency.  This will work well since you are generating
 the ids on the client side. 
-handle logging (maybe there's a few logging service, or at least free bug tracking)
-router edge cases (invalid month, year in the url) 
-use css resets
-use consistent font throughout the app. 
-fix double scrollbar issue 
-refactor category component to take in the whole object rather than passing 
sub properties off of the whole object. 
-cool feature: have the ability to move a transaction to a previous or next month.
So just add <, > buttons per row that do this.  

-setup pa11y
-use the latest ngrx example app patterns:
  -actions as classes 
-Setup route guard to prevent user from hitting the page. 
-lazy loading 
-gzip the application since angular cli doesn't do it automatically. 
