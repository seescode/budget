How to deploy to surge:
-cd into the dist directory 
-surge --domain ng-budget.surge.sh



-create the right hand nav bar 
-make responsive so that when you make the screen small 
it stops showing the left and right hand navs. 
-hmm... is it possible to also make the right hand nav 
appear at the click of a button in mobile view.  This 
way you can completely do away with the progress bar 
version of the reporting.  



-create a new component that encapsulate the pie chart. 
Basically the pie chart should take in the data which 
is going to be an array of this object: 
{
  color, text
}
It should also take in an event emitter as the input.  
This way when a next transaction is added we tell the 
pie chart to animate.
 -it should also take in width and height.  




-create 2 d3 pie charts: one for total budget and the other 
one for monthly budget which would also include in it the 
surplus.  You could also get fancy with the total budget 
pie chart for each month to have a unique color.  
http://bl.ocks.org/dbuezas/9306799
-we should have a small button that switches the view of 
the d3 pie charts.  Expanded or collapsed.  Collapsed would 
be a simple bar with colors.  No explanations at all.  


-we need to add some gutters to the page layout.  Especially for 
 desktop view 
-in mobile view the category, amount, new transaction boxes should be 
on 2 lines.  In desktop view it should be all on one line.  
-For responsive we will only 2 breakpoints: desktop and phone. 


-add a snackbar for whenever you add a transaction.  You should be 
able to quickly undo a transaction from this. 

-need to get the next and previous buttons hooked up to work 
-when clicking on the category list button it should go to a new 
page.  Maybe you can enable some type of nice transition whenever
you go to a new page.    
-when clicking on the create new budget button it should go to 
a new page.  Add a cool transition.    
-the new category button needs to be moved elsewhere.  Since you 
will enable scrolling this new category will not be very accessible. 
Either move it to the left hand side bar or put it on the top
navigation bar. 
-

-https://material.io/icons/


-design for mobile view first! 
-make the header sticky

-need to spend some time learning material UI
  -watch a video 
  -do themes give you css related to fonts and link colors?

-watch some design videos and see how you can improve the design 
-Designing the page 
  -we need a consistent header and footer 
  -the header should contain some consistent nav.  It should have a button 
  to easily take you to the budget list page. 
-make responsive
-add styling to make it look nicer 
-attempt to use a material design component to replace the dumb components
  -Get familiar with all of the components. 
  -List here possible components you might use:
    -Input
    -Button 
    
  -for each piece of UI you have think of what a good material design 
  component replacement might be.
  -Refactor to use the material design component. 





-unit test actions creator service 


-prevent navigating to earlier months than begin date.  Same 
with end date. 
-prevent going ahead to months that are in the future. 
-research how to do angular2 forms.
-Use constants for your action types

-Have the router prevent you from going to the 
main budget page if you haven't created a budget 
yet.  
-Explore adding an interface to the action in the reducers 
-write unit tests for reducers 
-write unit tests for dumb components
-write end to end tests instead of smart component unit tests 

-make keyboard accessible
-make screenreader accessible

-fix linting errors 
-implement exporting and importing budgets 
-create protractor tests that create a budget from scratch and then creates
 transactions.  It verifies that the calculated values are correct at the top.
 Then destroys the budget.  
-Have travisci or circleci run protractor tests and unit tests before it deploys
 using surge.
-prevent writing to master (require doing PRs to master)
-implement optimistic concurrency.  This will work well since you are generating
 the ids on the client side. 
-handle logging (maybe there's a few logging service, or at least free bug tracking)
-router edge cases (invalid month, year in the url) 

