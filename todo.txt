How to deploy to surge:
-npm run build
-cd into the dist directory 
-surge --domain ng-budget.surge.sh

Everyday:
-Always have the unit tests running
-Deploy at the end of each session assuming unit tests aren't breaking 
and lint isn't failing.

Plan:
-setup delete transaction snackbar 
-only show delete category when all transactions for that category in this 
month have been deleted. Explicitedly word is so it says delete category.
Most likely scenario where you would delete a category would be by making
it by mistake.  
-delete category should have a popup that appears asking for confirmation
-delete editCategoryRouteSelector and the category page and route
-when you create a category use the snackbar to allow you to undo. 
-do better styling for your transactions table 



-When you click edit category button 
  -This component will list all transactions for this selected month sorted
  from latest to newest.  
  (Bug right now the selector is getting for whole history)
  -Component will list like so (maybe in a table):
    -heading: amount, name, delete 
	-amount, name, Trash icon
  -Stop showing add new transaction info and instead show a delete category 
  button.
  -delete category should have a popup that 
  appears asking for confirmation
  -delete transaction should have a snackbar that let's you undo the delete. 
  -When switching budgets you must remember to clear the flag. 
  -cool feature: have the ability to move a transaction to a previous or next month.
  So just add <, > buttons per row that do this.  
-write end to end tests instead of smart component unit tests 
  -start with a blank empty budget and create 2 budgets from 
  scratch 
  -Add categories and transactions to both budgets
  -Go to the next month and add some more transactions
  -Check that the numbers are good
  -Make sure refresh works  
  -Delete transactions
  -Delete categories 
  -Delete budgets
-group the end to end tests in a logical manner
-implement exporting and importing budgets 
-label your pie charts
-research how to do angular2 forms.



-write unit tests for side effects
-unit test actions creator service 
-prevent navigating to earlier months than begin date.  Same 
with end date. 
-prevent going ahead to months that are in the future. 
-Use constants for your action types
-write unit tests for dumb components
-need to write a ton of documentation



Animate:
-graphs should animate using d3
-use fade in animation for changing budgets and going from 
one month to the next month
-when viewing transactions for a category have it come up from
the bottom.  Alternatively fade in animation is fine too
-when viewing create new budget screen fade in animation. 


read
-https://bost.ocks.org/mike/join/
-https://bost.ocks.org/mike/circles/
-https://bost.ocks.org/mike/selection/
-https://bost.ocks.org/mike/d3/workshop/#33



-https://material.io/icons/



-maybe in the future you can have 3 media query breakpoints:
  -desktop: would show both side navs
  -tablet: would only show the reporting nav 
  -phone: would show no navs


-Have the router prevent you from going to the 
main budget page if you haven't created a budget 
yet.  
-Explore adding an interface to the action in the reducers 

-make keyboard accessible
-make screenreader accessible

-fix linting errors 
-Have travisci or circleci run protractor tests and unit tests before it deploys
 using surge.
-prevent writing to master (require doing PRs to master)
-implement optimistic concurrency.  This will work well since you are generating
 the ids on the client side. 
-handle logging (maybe there's a few logging service, or at least free bug tracking)
-router edge cases (invalid month, year in the url) 

